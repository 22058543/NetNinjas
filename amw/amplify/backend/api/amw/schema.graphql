const amwSchema = `
type Story @model @auth(rules: [{ allow: owner }]) {
  id: ID!
  title: String!
  description: String
  status: StoryStatus!
  visibility: StoryVisibility!
  thumbnail: AWSURL
  chapterCount: Int!
  momentCount: Int!
  authorId: ID! @index(name: "byAuthor", queryField: "storiesByAuthor")
  tags: [String]
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime
  publishedAt: AWSDateTime
  
  # Cross-platform sync fields
  lastSyncedAt: AWSDateTime
  syncStatus: SyncStatus
  deviceLastModified: String # "web", "ios", "android"
  
  # Relationships
  chapters: [Chapter] @hasMany(indexName: "byStory", fields: ["id"])
}

type Chapter @model @auth(rules: [{ allow: owner }]) {
  id: ID!
  storyId: ID! @index(name: "byStory", queryField: "chaptersByStory")
  title: String!
  description: String
  status: ChapterStatus!
  order: Int!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime
  
  # Relationships
  story: Story @belongsTo(fields: ["storyId"])
  moments: [Moment] @hasMany(indexName: "byChapter", fields: ["id"])
}

type Moment @model @auth(rules: [{ allow: owner }]) {
  id: ID!
  chapterId: ID! @index(name: "byChapter", queryField: "momentsByChapter")
  storyId: ID! @index(name: "byStory")
  type: MomentType!
  title: String
  description: String
  content: String!
  media: MediaContent
  attribution: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime
  
  # Relationships
  chapter: Chapter @belongsTo(fields: ["chapterId"])
}

type MediaContent {
  url: AWSURL!
  thumbnail: AWSURL
  fileName: String!
  fileSize: Int!
  duration: Int
}

# Enums
enum StoryStatus {
  draft
  published
  archived
  private
}

enum StoryVisibility {
  public
  private
  shared
}

enum ChapterStatus {
  draft
  published
  archived
}

enum MomentType {
  text
  image
  video
  audio
}

enum SyncStatus {
  SYNCED
  PENDING
  CONFLICT
  ERROR
}

# Custom mutations for story operations
type Mutation {
  createStoryWithChapter(input: CreateStoryWithChapterInput!): Story
  saveStoryProgress(input: SaveStoryProgressInput!): Story
  syncStoryAcrossPlatforms(storyId: ID!, deviceType: String!): SyncResult
}

# Input types
input CreateStoryWithChapterInput {
  title: String!
  description: String
  status: StoryStatus = draft
  visibility: StoryVisibility = private
  tags: [String]
  chapterTitle: String!
  deviceType: String! # "web", "ios", "android"
}

input SaveStoryProgressInput {
  storyId: ID!
  title: String
  description: String
  status: StoryStatus
  visibility: StoryVisibility
  tags: [String]
  deviceType: String!
}

type SyncResult {
  success: Boolean!
  message: String!
  lastSyncedAt: AWSDateTime!
  conflictsResolved: Int!
}

# Real-time subscriptions for cross-platform sync
type Subscription {
  onStoryUpdated(authorId: ID!): Story
    @aws_subscribe(mutations: ["createStory", "updateStory", "createStoryWithChapter"])
  
  onStorySync(authorId: ID!): Story  
    @aws_subscribe(mutations: ["syncStoryAcrossPlatforms"])
}
`;